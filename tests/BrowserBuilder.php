<?php

namespace Tests;

use Closure;
use Illuminate\Support\Collection;
use Laravel\Dusk\Browser;

/**
 * Browser builder.
 *
 * @method self visit(string $path)
 * @method self visitRoute(string $route)
 * @method self blank()
 * @method self on(object $page)
 * @method self onWithoutAssert()
 * @method self refresh()
 * @method self back()
 * @method self forward()
 * @method self maximize()
 * @method self resize()
 * @method self fitContent()
 * @method self disableFitOnFailure()
 * @method self enableFitOnFailure()
 * @method self move()
 * @method self scrollIntoView()
 * @method self scrollTo()
 * @method self screenshot()
 * @method self storeConsoleLog()
 * @method self storeSource()
 * @method self withinFrame()
 * @method self within()
 * @method self with()
 * @method self elsewhere()
 * @method self elsewhereWhenAvailable()
 * @method self onComponent()
 * @method self ensurejQueryIsAvailable()
 * @method self pause()
 * @method self quit()
 * @method self tap()
 * @method self dump()
 * @method self tinker()
 * @method self stop()
 * @method self login()
 * @method self loginAs(\App\Models\User $user)
 * @method self logout()
 * @method self assertAuthenticated()
 * @method self assertGuest()
 * @method self assertAuthenticatedAs()
 * @method self cookie()
 * @method self plainCookie()
 * @method self addCookie()
 * @method self deleteCookie()
 * @method self elements()
 * @method self element()
 * @method self clickLink(string $text)
 * @method self value()
 * @method self text()
 * @method self attribute()
 * @method self keys()
 * @method self type(string $field, string $text)
 * @method self typeSlowly()
 * @method self append()
 * @method self appendSlowly()
 * @method self clear()
 * @method self select(string $field, string $value)
 * @method self radio()
 * @method self check()
 * @method self uncheck()
 * @method self attach()
 * @method self press()
 * @method self pressAndWaitFor()
 * @method self drag()
 * @method self dragUp()
 * @method self dragDown()
 * @method self dragLeft()
 * @method self dragRight()
 * @method self dragOffset()
 * @method self acceptDialog()
 * @method self typeInDialog()
 * @method self dismissDialog()
 * @method self script()
 * @method self moveMouse()
 * @method self mouseover()
 * @method self click(string $text)
 * @method self clickAtPoint()
 * @method self clickAtXPath()
 * @method self clickAndHold()
 * @method self doubleClick()
 * @method self rightClick()
 * @method self releaseMouse()
 * @method self assertTitle()
 * @method self assertTitleContains()
 * @method self assertHasCookie()
 * @method self assertHasPlainCookie()
 * @method self assertCookieMissing()
 * @method self assertPlainCookieMissing()
 * @method self assertCookieValue()
 * @method self assertPlainCookieValue()
 * @method self assertSee(string $text)
 * @method self assertDontSee(string $text)
 * @method self assertSeeIn(string $selector, string $text)
 * @method self assertDontSeeIn(string $selector, string $text)
 * @method self assertSeeAnythingIn(string $selector)
 * @method self assertSeeNothingIn(string $selector)
 * @method self assertScript()
 * @method self assertSourceHas(string $code)
 * @method self assertSourceMissing(string $code)
 * @method self assertSeeLink(string $linkText)
 * @method self assertDontSeeLink(string $linkText)
 * @method self seeLink(string $linkText)
 * @method self assertInputValue()
 * @method self assertInputValueIsNot()
 * @method self inputValue()
 * @method self assertInputPresent()
 * @method self assertInputMissing()
 * @method self assertChecked()
 * @method self assertNotChecked()
 * @method self assertRadioSelected()
 * @method self assertRadioNotSelected()
 * @method self assertSelected()
 * @method self assertNotSelected()
 * @method self assertSelectHasOptions()
 * @method self assertSelectMissingOptions()
 * @method self assertSelectHasOption()
 * @method self assertSelectMissingOption()
 * @method self selected()
 * @method self assertValue()
 * @method self assertValueIsNot()
 * @method self ensureElementSupportsValueAttribute()
 * @method self assertAttribute()
 * @method self assertAttributeContains()
 * @method self assertAriaAttribute()
 * @method self assertDataAttribute()
 * @method self assertVisible()
 * @method self assertPresent()
 * @method self assertNotPresent()
 * @method self assertMissing()
 * @method self assertDialogOpened()
 * @method self assertEnabled()
 * @method self assertDisabled()
 * @method self assertButtonEnabled()
 * @method self assertButtonDisabled()
 * @method self assertFocused()
 * @method self assertNotFocused()
 * @method self assertVue()
 * @method self assertVueIsNot()
 * @method self assertVueContains()
 * @method self assertVueDoesNotContain()
 * @method self vueAttribute()
 * @method self assertUrlIs()
 * @method self assertSchemeIs()
 * @method self assertSchemeIsNot()
 * @method self assertHostIs()
 * @method self assertHostIsNot()
 * @method self assertPortIs()
 * @method self assertPortIsNot()
 * @method self assertPathBeginsWith()
 * @method self assertPathIs()
 * @method self assertPathIsNot()
 * @method self assertRouteIs()
 * @method self assertQueryStringHas()
 * @method self assertQueryStringMissing()
 * @method self assertFragmentIs()
 * @method self assertFragmentBeginsWith()
 * @method self assertFragmentIsNot()
 * @method self whenAvailable()
 * @method self waitFor()
 * @method self waitUntilMissing()
 * @method self waitUntilMissingText()
 * @method self waitForText()
 * @method self waitForTextIn()
 * @method self waitForLink()
 * @method self waitForInput()
 * @method self waitForLocation()
 * @method self waitForRoute()
 * @method self waitUntilEnabled()
 * @method self waitUntilDisabled()
 * @method self waitUntil()
 * @method self waitUntilVue()
 * @method self waitUntilVueIsNot()
 * @method self waitForDialog()
 * @method self waitForReload()
 * @method self clickAndWaitForReload()
 * @method self waitForEvent()
 * @method self waitUsing()
 * @method self macro()
 * @method self mixin()
 * @method self hasMacro()
 * @method self flushMacros()
 * @method self macroCall()
 */
class BrowserBuilder
{
    public function __construct(
        protected Collection $builder = new Collection()
    ) {
    }

    public function __call($name, $arguments)
    {
        $this->builder->push(collect([$name, ...$arguments]));

        return $this;
    }

    /**
     * Return the builder closure.
     *
     * @return Closure
     */
    public function execute(): Closure
    {
        $builder = $this->builder;

        return function (Browser $browser) use ($builder) {
            $builder->each(function ($query) use ($browser) {
                $browser->{$query->shift()}(...$query->all());
            });
        };
    }
}
